using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Threading;

namespace RdpMonitor
{
    public class RdpMonitor
    {
        private bool _isMonitoring;
        private EventLogMonitor? _eventLogMonitor;
        private TelegramBot? _telegramBot;
        private HashSet<string>? _processedEvents;
        private Timer? _cleanupTimer;

        public void Initialize()
        {
            try
            {
                LogMessage("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RDP –º–æ–Ω–∏—Ç–æ—Ä–∞...");
                
                Config config = Config.Load();
                _telegramBot = new TelegramBot(config.BotToken, config.ChatId);
                
                _processedEvents = new HashSet<string>();
                _eventLogMonitor = new EventLogMonitor("Security");
                
                _eventLogMonitor.OnEventLogged += (entry) =>
                {
                    if (entry.InstanceId == 4624L) // RDP –≤—Ö–æ–¥
                    {
                        ProcessRdpLoginEvent(entry);
                    }
                };

                _cleanupTimer = new Timer(CleanupProcessedEvents!, null, 
                    TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(30));

                LogMessage("RDP –º–æ–Ω–∏—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
                
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                _telegramBot.SendMessage("‚úÖ RDP Monitor –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Å–ª—É–∂–±—ã");
            }
            catch (Exception ex)
            {
                LogMessage($"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {ex.Message}");
                throw;
            }
        }

        public void Start()
        {
            if (_isMonitoring) return;
            
            _isMonitoring = true;
            _eventLogMonitor?.StartMonitoring();
            LogMessage("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –∑–∞–ø—É—â–µ–Ω");
        }

        public void Stop()
        {
            if (!_isMonitoring) return;
            
            _isMonitoring = false;
            _eventLogMonitor?.StopMonitoring();
            _cleanupTimer?.Dispose();
            LogMessage("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }

        public bool IsRunning()
        {
            return _isMonitoring && _eventLogMonitor != null;
        }

        private void ProcessRdpLoginEvent(EventLogEntry entry)
        {
            try
            {
                // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ —Å–µ–∫—É–Ω–¥—ã
                string eventSignature = $"{entry.TimeGenerated:yyyyMMddHHmmss}_{entry.InstanceId}";
                
                if (_processedEvents!.Contains(eventSignature))
                    return;

                _processedEvents.Add(eventSignature);

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ EventData
                var eventData = Models.EventData.FromEventLogEntry(entry);
                
                // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                LogMessage($"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è: User={eventData.UserName}, Workstation={eventData.Workstation}, IP={eventData.IpAddress}");
                
                string message = $"üîê –ù–æ–≤—ã–π RDP –≤—Ö–æ–¥:\n" +
                               $"üïê –í—Ä–µ–º—è: {eventData.Time:dd.MM.yyyy HH:mm:ss}\n" +
                               $"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {eventData.UserName}\n" +
                               $"üíª –ö–æ–º–ø—å—é—Ç–µ—Ä: {eventData.Workstation}\n" +
                               $"üìç IP –∞–¥—Ä–µ—Å: {eventData.IpAddress}";

                _telegramBot!.SendMessage(message);
                LogMessage($"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ RDP –≤—Ö–æ–¥–µ: {eventData.UserName} —Å IP: {eventData.IpAddress}");
            }
            catch (Exception ex)
            {
                LogMessage($"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è RDP: {ex.Message}");
            }
        }

        private void CleanupProcessedEvents(object? state)
        {
            try
            {
                var cutoffTime = DateTime.Now.AddHours(-1); // –£–º–µ–Ω—å—à–∏–º –¥–æ 1 —á–∞—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                
                _processedEvents!.RemoveWhere(eventId => 
                {
                    if (eventId.Split('_').Length > 0)
                    {
                        string datePart = eventId.Split('_')[0];
                        if (DateTime.TryParseExact(datePart, "yyyyMMddHHmmss", 
                            null, System.Globalization.DateTimeStyles.None, out DateTime eventTime))
                        {
                            return eventTime < cutoffTime;
                        }
                    }
                    return false;
                });
                
                LogMessage($"–û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å: {_processedEvents.Count}");
            }
            catch (Exception ex)
            {
                LogMessage($"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π: {ex.Message}");
            }
        }

        private string ExtractUserName(EventLogEntry entry)
        {
            try
            {
                // –ü–∞—Ä—Å–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
                string[] parts = entry.Message.Split('\n');
                foreach (string part in parts)
                {
                    if (part.Contains("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:") || part.Contains("User Name:"))
                        return part.Split(':')[1].Trim();
                }
                return "N/A";
            }
            catch
            {
                return "N/A";
            }
        }

        private string ExtractComputerName(EventLogEntry entry)
        {
            try
            {
                return entry.MachineName;
            }
            catch
            {
                return "N/A";
            }
        }

        private string ExtractIpAddress(EventLogEntry entry)
        {
            try
            {
                // –ü–∞—Ä—Å–∏–º IP –∞–¥—Ä–µ—Å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
                string[] parts = entry.Message.Split('\n');
                foreach (string part in parts)
                {
                    if (part.Contains("–ê–¥—Ä–µ—Å —Å–µ—Ç–∏:") || part.Contains("Network Address:"))
                        return part.Split(':')[1].Trim();
                }
                return "N/A";
            }
            catch
            {
                return "N/A";
            }
        }

        public static void LogMessage(string message)
        {
            try
            {
                string logFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "log.txt");
                string logEntry = $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] [MONITOR] {message}";
                File.AppendAllText(logFile, logEntry + Environment.NewLine);
            }
            catch
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            }
        }
    }
}