using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Threading;

namespace RdpMonitor
{
    public class RdpMonitor
    {
        private bool _isMonitoring;
        private EventLogMonitor _eventLogMonitor;
        private TelegramBot _telegramBot;
        private HashSet<string> _processedEvents;
        private Timer _cleanupTimer;

        public void Initialize()
        {
            try
            {
                LogMessage("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RDP –º–æ–Ω–∏—Ç–æ—Ä–∞...");
                
                // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                Config config = Config.Load();
                _telegramBot = new TelegramBot(config.BotToken, config.ChatId);
                
                _processedEvents = new HashSet<string>();
                _eventLogMonitor = new EventLogMonitor("Security");
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
                _eventLogMonitor.OnEventLogged += (entry) =>
                {
                    if (entry.InstanceId == 4624L) // RDP –≤—Ö–æ–¥
                    {
                        ProcessRdpLoginEvent(entry);
                    }
                };

                // –¢–∞–π–º–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)
                _cleanupTimer = new Timer(CleanupProcessedEvents, null, 
                    TimeSpan.FromMinutes(30), TimeSpan.FromMinutes(30));

                LogMessage("RDP –º–æ–Ω–∏—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
                
                // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                _telegramBot.SendMessage("‚úÖ RDP Monitor –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ —Å–ª—É–∂–±—ã");
            }
            catch (Exception ex)
            {
                LogMessage($"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {ex.Message}");
                throw;
            }
        }

        public void Start()
        {
            if (_isMonitoring) return;
            
            _isMonitoring = true;
            _eventLogMonitor?.StartMonitoring();
            LogMessage("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –∑–∞–ø—É—â–µ–Ω");
        }

        public void Stop()
        {
            if (!_isMonitoring) return;
            
            _isMonitoring = false;
            _eventLogMonitor?.StopMonitoring();
            _cleanupTimer?.Dispose();
            LogMessage("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }

        public bool IsRunning()
        {
            return _isMonitoring && _eventLogMonitor != null;
        }

        private void ProcessRdpLoginEvent(EventLogEntry entry)
        {
            try
            {
                string eventSignature = $"{entry.TimeGenerated:yyyyMMddHHmm}_{entry.InstanceId}_{entry.Index}";
                
                if (_processedEvents.Contains(eventSignature))
                    return;

                _processedEvents.Add(eventSignature);

                string message = $"üîê –ù–æ–≤—ã–π RDP –≤—Ö–æ–¥:\n" +
                               $"üïê –í—Ä–µ–º—è: {entry.TimeGenerated:dd.MM.yyyy HH:mm:ss}\n" +
                               $"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ExtractUserName(entry)}\n" +
                               $"üíª –ö–æ–º–ø—å—é—Ç–µ—Ä: {ExtractComputerName(entry)}\n" +
                               $"üìç IP –∞–¥—Ä–µ—Å: {ExtractIpAddress(entry)}";

                _telegramBot.SendMessage(message);
                LogMessage($"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ RDP –≤—Ö–æ–¥–µ: {ExtractUserName(entry)}");
            }
            catch (Exception ex)
            {
                LogMessage($"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è RDP: {ex.Message}");
            }
        }

        private void CleanupProcessedEvents(object state)
        {
            try
            {
                // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                var cutoffTime = DateTime.Now.AddHours(-24);
                _processedEvents.RemoveWhere(eventId => 
                    DateTime.TryParse(eventId.Split('_')[0], "yyyyMMddHHmm", null, 
                    System.Globalization.DateTimeStyles.None, out DateTime eventTime) && 
                    eventTime < cutoffTime);
                
                LogMessage($"–û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å: {_processedEvents.Count}");
            }
            catch (Exception ex)
            {
                LogMessage($"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π: {ex.Message}");
            }
        }

        private string ExtractUserName(EventLogEntry entry) => "N/A";
        private string ExtractComputerName(EventLogEntry entry) => "N/A"; 
        private string ExtractIpAddress(EventLogEntry entry) => "N/A";

        public static void LogMessage(string message)
        {
            try
            {
                string logFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "log.txt");
                string logEntry = $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] [MONITOR] {message}";
                File.AppendAllText(logFile, logEntry + Environment.NewLine);
            }
            catch
            {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            }
        }
    }
}