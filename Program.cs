using System.Management;
using Microsoft.Extensions.Configuration;
using RdpMonitor.Models;
using RdpMonitor.Services;

namespace RdpMonitor;

class Program
{
    private static ITelegramService? _telegramService;
    private static AppConfig _config = new();
    private static readonly HashSet<string> _processedLogonIds = new();
    private static readonly object _lockObject = new object();
    
    static async Task Main(string[] args)
    {
        AppDomain.CurrentDomain.UnhandledException += (sender, e) =>
        {
           Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e.ExceptionObject}");
           Environment.Exit(1);
        };
        Console.WriteLine("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ RDP –≤—Ö–æ–¥–æ–≤...");
        Console.WriteLine("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n");

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if (!LoadConfiguration())
        {
            Console.WriteLine("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!");
            return;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Telegram
        _telegramService = new TelegramService(_config.Telegram.BotToken, _config.Telegram.ChatId);

        try
        {
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...");
            var testMessage = await _telegramService.SendMessageAsync(
                "üîî **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ RDP –∑–∞–ø—É—â–µ–Ω!**\n" +
                $"–°–µ—Ä–≤–µ—Ä –Ω–∞—á–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–æ–≤.\n" +
                $"üìä –ñ—É—Ä–Ω–∞–ª: {_config.Monitoring.LogName}\n" +
                $"üéØ EventID: {_config.Monitoring.TargetEventId}\n" +
                $"üîÑ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: –≤–∫–ª—é—á–µ–Ω–∞"
            );

            if (testMessage)
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
            }

            await StartEventMonitoring();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {ex.Message}");
        }
    }

    private static bool LoadConfiguration()
    {
        try
        {
            var configuration = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
                .Build();

            configuration.Bind(_config);

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if (string.IsNullOrEmpty(_config.Telegram.BotToken) || _config.Telegram.BotToken == "YOUR_BOT_TOKEN_HERE")
            {
                Console.WriteLine("‚ùå –ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram –≤ appsettings.json");
                return false;
            }

            if (string.IsNullOrEmpty(_config.Telegram.ChatId) || _config.Telegram.ChatId == "YOUR_CHAT_ID_HERE")
            {
                Console.WriteLine("‚ùå –ù–µ –∑–∞–¥–∞–Ω Chat ID –≤ appsettings.json");
                return false;
            }

            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞");
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {ex.Message}");
            return false;
        }
    }

    private static async Task StartEventMonitoring()
    {
        try
        {
            var query = new WqlEventQuery(
                $"SELECT * FROM __InstanceCreationEvent WITHIN {_config.Monitoring.CheckIntervalSeconds} " +
                $"WHERE TargetInstance ISA 'Win32_NTLogEvent' " +
                $"AND TargetInstance.LogFile = '{_config.Monitoring.LogName}' " +
                $"AND TargetInstance.EventCode = '{_config.Monitoring.TargetEventId}'"
            );

            using var watcher = new ManagementEventWatcher(query);
            
            watcher.EventArrived += async (sender, e) =>
            {
                try
                {
                    await HandleEvent(e);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {ex.Message}");
                }
            };

            watcher.Start();
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π {_config.Monitoring.LogName} –∑–∞–ø—É—â–µ–Ω...");
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üîç –û–∂–∏–¥–∞–Ω–∏–µ RDP –≤—Ö–æ–¥–æ–≤ (EventID: {_config.Monitoring.TargetEventId})...");
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üîÑ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞ - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å—Å—è");

            // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö ID –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            _ = Task.Run(async () =>
            {
                while (true)
                {
                    await Task.Delay(TimeSpan.FromMinutes(5));
                    CleanupOldEntries();
                }
            });

            Console.CancelKeyPress += (sender, e) =>
            {
                e.Cancel = true;
                watcher.Stop();
                Console.WriteLine("\n‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
                Environment.Exit(0);
            };

            await Task.Delay(-1);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {ex.Message}");
        }
    }

    private static async Task HandleEvent(EventArrivedEventArgs e)
    {
        var targetInstance = (ManagementBaseObject)e.NewEvent["TargetInstance"];
        var eventData = EventData.FromManagementObject(targetInstance);

        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
        Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üìã {eventData.ToConsoleLog()}");

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ä–∞–∑—É
        if (!eventData.IsValidUserLogin())
        {
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üîÑ –ü—Ä–æ–ø—É—â–µ–Ω–æ (—Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)");
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
            return;
        }

        // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è RDP
        if (!eventData.IsRdpLogin())
        {
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üîÑ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ RDP –≤—Ö–æ–¥)");
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
            return;
        }

        // üîÑ –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–Ø - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ
        var eventKey = CreateEventKey(eventData);
        
        lock (_lockObject)
        {
            if (_processedLogonIds.Contains(eventKey))
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üîÑ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç)");
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
                return;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            _processedLogonIds.Add(eventKey);
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üìù –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫—ç—à: {eventKey}");
        }

        Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üéØ –û–ë–ù–ê–†–£–ñ–ï–ù RDP –í–•–û–î!");

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
        var telegramMessage = eventData.ToTelegramMessage();
        var sendResult = await _telegramService!.SendMessageAsync(telegramMessage);

        if (sendResult)
        {
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚úÖ RDP —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram");
        }
        else
        {
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ RDP —Å–æ–±—ã—Ç–∏—è");
        }
        
        Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    /// </summary>
    private static string CreateEventKey(EventData eventData)
    {
        // –ö–ª—é—á –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, IP –∏ –≤—Ä–µ–º–µ–Ω–∏ (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –º–∏–Ω—É—Ç—ã)
        // –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        var timeKey = eventData.TimeCreated.ToString("yyyyMMddHHmm");
        return $"{eventData.TargetUserName}@{eventData.SourceNetworkAddress}@{timeKey}";
    }

    /// <summary>
    /// –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
    /// </summary>
    private static void CleanupOldEntries()
    {
        lock (_lockObject)
        {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üßπ –†–∞–∑–º–µ—Ä –∫—ç—à–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {_processedLogonIds.Count} –∑–∞–ø–∏—Å–µ–π");
            
            // –û—á–∏—â–∞–µ–º –∫—ç—à –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            if (_processedLogonIds.Count > 1000)
            {
                _processedLogonIds.Clear();
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss}] üßπ –ö—ç—à –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω");
            }
        }
    }
}