using System.Management;

namespace RdpMonitor.Models;

public class EventData
{
    public int EventId { get; set; }
    public DateTime TimeCreated { get; set; }
    public string LogName { get; set; } = string.Empty;
    public string Source { get; set; } = string.Empty;
    public string Level { get; set; } = string.Empty;
    public string Message { get; set; } = string.Empty;
    
    // –î–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è
    public string SubjectUserSid { get; set; } = string.Empty;
    public string SubjectUserName { get; set; } = string.Empty;
    public string SubjectDomainName { get; set; } = string.Empty;
    public string SubjectLogonId { get; set; } = string.Empty;
    
    public string TargetUserSid { get; set; } = string.Empty;
    public string TargetUserName { get; set; } = string.Empty;
    public string TargetDomainName { get; set; } = string.Empty;
    public string TargetLogonId { get; set; } = string.Empty;
    
    public string LogonType { get; set; } = string.Empty;
    public string WorkstationName { get; set; } = string.Empty;
    public string SourceNetworkAddress { get; set; } = string.Empty;
    public string SourcePort { get; set; } = string.Empty;
    public string ProcessName { get; set; } = string.Empty;
    public string ProcessId { get; set; } = string.Empty;
    public string LogonProcessName { get; set; } = string.Empty;
    public string AuthenticationPackageName { get; set; } = string.Empty;

    public static EventData FromManagementObject(ManagementBaseObject targetInstance)
    {
        var eventData = new EventData
        {
            EventId = Convert.ToInt32(targetInstance["EventCode"]),
            TimeCreated = ManagementDateTimeConverter.ToDateTime(targetInstance["TimeGenerated"].ToString()),
            LogName = targetInstance["LogFile"]?.ToString() ?? string.Empty,
            Source = targetInstance["SourceName"]?.ToString() ?? string.Empty
        };

        var insertionStrings = targetInstance["InsertionStrings"] as string[];
        
        if (insertionStrings != null && insertionStrings.Length >= 20)
        {
            eventData.SubjectUserSid = GetSafeString(insertionStrings, 0);
            eventData.SubjectUserName = GetSafeString(insertionStrings, 1);
            eventData.SubjectDomainName = GetSafeString(insertionStrings, 2);
            eventData.SubjectLogonId = GetSafeString(insertionStrings, 3);
            
            eventData.TargetUserSid = GetSafeString(insertionStrings, 4);
            eventData.TargetUserName = GetSafeString(insertionStrings, 5);
            eventData.TargetDomainName = GetSafeString(insertionStrings, 6);
            eventData.TargetLogonId = GetSafeString(insertionStrings, 7);
            
            eventData.LogonType = GetSafeString(insertionStrings, 8);
            eventData.LogonProcessName = GetSafeString(insertionStrings, 9);
            eventData.AuthenticationPackageName = GetSafeString(insertionStrings, 10);
            eventData.WorkstationName = GetSafeString(insertionStrings, 11);
            eventData.SourceNetworkAddress = GetSafeString(insertionStrings, 18);
            eventData.SourcePort = GetSafeString(insertionStrings, 19);
            
            eventData.ProcessId = GetSafeString(insertionStrings, 16);
            eventData.ProcessName = GetSafeString(insertionStrings, 17);
        }

        return eventData;
    }

    private static string GetSafeString(string[] array, int index)
    {
        return array != null && index < array.Length ? array[index] ?? "N/A" : "N/A";
    }

    public string ToTelegramMessage()
    {
        var logonTypeDesc = GetLogonTypeDescription(LogonType);
        
        var message = "üö® **–£—Å–ø–µ—à–Ω—ã–π RDP –≤—Ö–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä!**\n\n" +
                     $"üìÖ **–í—Ä–µ–º—è:** {TimeCreated:dd.MM.yyyy HH:mm:ss}\n" +
                     $"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {TargetDomainName}\\{TargetUserName}\n" +
                     $"üåê **IP –∞–¥—Ä–µ—Å:** {SourceNetworkAddress}\n" +
                     $"üíª **–†–∞–±–æ—á–∞—è —Å—Ç–∞–Ω—Ü–∏—è:** {WorkstationName}\n" +
                     $"üîß **–¢–∏–ø –≤—Ö–æ–¥–∞:** {logonTypeDesc} ({LogonType})\n" +
                     $"üÜî **ID –≤—Ö–æ–¥–∞:** {TargetLogonId}\n";

        if (!string.IsNullOrEmpty(ProcessName) && ProcessName != "N/A" && ProcessName != "-")
        {
            message += $"‚öôÔ∏è **–ü—Ä–æ—Ü–µ—Å—Å:** {ProcessName} (PID: {ProcessId})\n";
        }

        message += $"üîê **–ü–∞–∫–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:** {AuthenticationPackageName}\n" +
                  $"üìù **–ü—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞:** {LogonProcessName}";

        return message;
    }

    public string ToConsoleLog()
    {
        var logonTypeDesc = GetLogonTypeDescription(LogonType);
        return $"[{TimeCreated:HH:mm:ss}] Event {EventId} - User: {TargetDomainName}\\{TargetUserName}, " +
               $"IP: {SourceNetworkAddress}, Workstation: {WorkstationName}, LogonType: {LogonType} ({logonTypeDesc})";
    }

    public string ToDebugLog()
    {
        return $"[{TimeCreated:HH:mm:ss}] DEBUG - LogonType: '{LogonType}', " +
               $"Workstation: '{WorkstationName}', IP: '{SourceNetworkAddress}', " +
               $"AuthPackage: '{AuthenticationPackageName}', Process: '{ProcessName}'";
    }

    private static string GetLogonTypeDescription(string logonType)
    {
        return logonType switch
        {
            "2" => "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π (–ª–æ–∫–∞–ª—å–Ω—ã–π)",
            "3" => "–°–µ—Ç–µ–≤–æ–π",
            "4" => "–ü–∞–∫–µ—Ç–Ω—ã–π",
            "5" => "–°–ª—É–∂–±–∞",
            "7" => "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞",
            "8" => "NetworkCleartext",
            "9" => "NewCredentials",
            "10" => "RemoteInteractive (RDP)",
            "11" => "–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            "12" => "RemoteInteractive (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)",
            "13" => "RemoteInteractive (Unlock)",
            _ => $"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ({logonType})"
        };
    }

    public bool IsRdpLogin()
    {
        // 1. –ü—Ä—è–º–æ–π RDP –≤—Ö–æ–¥ (—Ç–∏–ø 10)
        if (LogonType == "10")
            return true;
        
        // 2. –°–µ—Ç–µ–≤–æ–π –≤—Ö–æ–¥ (—Ç–∏–ø 3) —Å –≤–Ω–µ—à–Ω–∏–º IP - –û–°–ù–û–í–ù–û–ô –ö–†–ò–¢–ï–†–ò–ô –î–õ–Ø RDP
        if (LogonType == "3")
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            bool isValidUser = IsValidUserLogin();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤–Ω–µ—à–Ω–∏–π IP –∞–¥—Ä–µ—Å
            bool hasExternalIp = !string.IsNullOrEmpty(SourceNetworkAddress) &&
                                SourceNetworkAddress != "-" &&
                                SourceNetworkAddress != "127.0.0.1" &&
                                SourceNetworkAddress != "::1" &&
                                SourceNetworkAddress != "N/A";
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ RDP
            bool hasRdpIndicators = WorkstationName?.Contains("DESKTOP-") == true ||
                                   WorkstationName?.Contains("TERMSRV") == true ||
                                   AuthenticationPackageName?.Contains("NTLM") == true ||
                                   LogonProcessName?.Contains("NtLmSsp") == true;
            
            Console.WriteLine($"[DEBUG] RDP Check - User: {isValidUser}, IP: {hasExternalIp}, Indicators: {hasRdpIndicators}");
            
            return isValidUser && hasExternalIp && hasRdpIndicators;
        }
        
        return false;
    }

    public bool IsValidUserLogin()
    {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        var systemUsers = new[] { "–°–ò–°–¢–ï–ú–ê", "SYSTEM", "LOCAL SERVICE", "NETWORK SERVICE", "ANONYMOUS LOGON" };
        
        return !systemUsers.Contains(TargetUserName.ToUpper()) &&
               !string.IsNullOrEmpty(TargetUserName) &&
               TargetUserName != "-" &&
               TargetUserName != "N/A";
    }
}